worker:
  replicaCount: 1
  name: worker
  image:
    repository: querybook/querybook
    pullPolicy: IfNotPresent
    tag: latest
  resources:
    requests:
      memory: 700Mi
      cpu: 700m
    limits:
      memory: 900Mi
      cpu: 1

scheduler:
  replicaCount: 1
  name: scheduler
  image:
    repository: querybook/querybook
    pullPolicy: IfNotPresent
    tag: latest
  resources:
    requests:
      memory: '200Mi'
      cpu: '100m'
    limits:
      memory: '200Mi'
      cpu: '100m'

web:
  replicaCount: 1
  name: web
  image:
    repository: querybook/querybook
    pullPolicy: IfNotPresent
    tag: latest
  service:
    serviceType: ClusterIP
    servicePort: 80
    containerPort: 10001
  resources:
    requests:
      memory: 1Gi
      cpu: 1
    limits:
      memory: 3Gi
      cpu: 1

mysql:
  enabled: true
  replicaCount: 1
  name: mysql
  image:
    repository: mariadb
    pullPolicy: IfNotPresent
    tag: "10.5.4"
  dbsetting:
    database: querybook2
    host: mysql:3306
    pwd: passw0rd
    rootpwd: hunter2
    user: test
  service:
    serviceType: ClusterIP
    servicePort: 3306
  resources:
    requests:
      memory: '500Mi'
      cpu: '300m'
    limits:
      memory: '500Mi'
      cpu: '300m'

redis:
  enabled: true
  replicaCount: 1
  name: redis
  image:
    repository: redis
    pullPolicy: IfNotPresent
    tag: "5.0.9"
  service:
    serviceType: ClusterIP
    servicePort: 6379
  resources:
    requests:
      memory: '1Gi'
      cpu: '300m'
    limits:
      memory: '1Gi'
      cpu: '300m'

elasticsearch:
  enabled: true
  replicaCount: 1
  name: elasticsearch
  image:
    repository: docker.elastic.co/elasticsearch/elasticsearch
    pullPolicy: IfNotPresent
    tag: "7.16.2"
  extraEnvs:
    - name: ES_JAVA_OPTS
      value: -Xms512m -Xmx512m
    - name: bootstrap.memory_lock
      value: 'false'
    - name: cluster.name
      value: docker-cluster
    - name: discovery.type
      value: single-node
  service:
    serviceType: ClusterIP
    servicePort: 9200
  resources:
    requests:
      memory: '1Gi'
      cpu: '200m'
    limits:
      memory: '1Gi'
      cpu: '200m'

# assigning pods to node configs. will be applied to all the querybook pods
nodeSelector: {}
affinity: {}
tolerations: []
podAnnotations: {}

ingress:
  enabled: true
  ingressClassName: ~
  annotations: {}
  path: /*
  pathType: ImplementationSpecific
  hosts:
  - <your-querybook-app-domain>
  tls: []
  # - secretName: <your-querybook-tls-secret>
  #   hosts:
  #     - <your-querybook-app-domain>

extraEnv:
  PUBLIC_URL: https://<your-querybook-app-domain>
  # any other Querybook configuration env. variables can be injected from here

secret:
  flask_secret_key: SOME_RANDOM_SECRET_KEY
  database_conn: mysql+pymysql://test:passw0rd@mysql:3306/querybook2?charset=utf8mb4
  redis_url:  redis://redis:6379/0
  elasticsearch_host: elasticsearch:9200

# existingSecret -- Use an existing Secret which contains the above secret values in the same format and base64 encoded.
## If set, this parameter takes precedence over "secret".
existingSecret:
